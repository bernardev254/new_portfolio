/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Projects as PrismaProjects } from "@prisma/client";

export class ProjectsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProjectsCountArgs, "select">): Promise<number> {
    return this.prisma.projects.count(args);
  }

  async projectsItems<T extends Prisma.ProjectsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectsFindManyArgs>
  ): Promise<PrismaProjects[]> {
    return this.prisma.projects.findMany<Prisma.ProjectsFindManyArgs>(args);
  }
  async projects<T extends Prisma.ProjectsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectsFindUniqueArgs>
  ): Promise<PrismaProjects | null> {
    return this.prisma.projects.findUnique(args);
  }
  async createProjects<T extends Prisma.ProjectsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectsCreateArgs>
  ): Promise<PrismaProjects> {
    return this.prisma.projects.create<T>(args);
  }
  async updateProjects<T extends Prisma.ProjectsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectsUpdateArgs>
  ): Promise<PrismaProjects> {
    return this.prisma.projects.update<T>(args);
  }
  async deleteProjects<T extends Prisma.ProjectsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProjectsDeleteArgs>
  ): Promise<PrismaProjects> {
    return this.prisma.projects.delete(args);
  }
}
