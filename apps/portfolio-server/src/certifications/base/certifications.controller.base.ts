/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CertificationsService } from "../certifications.service";
import { CertificationsCreateInput } from "./CertificationsCreateInput";
import { Certifications } from "./Certifications";
import { CertificationsFindManyArgs } from "./CertificationsFindManyArgs";
import { CertificationsWhereUniqueInput } from "./CertificationsWhereUniqueInput";
import { CertificationsUpdateInput } from "./CertificationsUpdateInput";

export class CertificationsControllerBase {
  constructor(protected readonly service: CertificationsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Certifications })
  async createCertifications(
    @common.Body() data: CertificationsCreateInput
  ): Promise<Certifications> {
    return await this.service.createCertifications({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Certifications] })
  @ApiNestedQuery(CertificationsFindManyArgs)
  async certificationsItems(
    @common.Req() request: Request
  ): Promise<Certifications[]> {
    const args = plainToClass(CertificationsFindManyArgs, request.query);
    return this.service.certificationsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Certifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async certifications(
    @common.Param() params: CertificationsWhereUniqueInput
  ): Promise<Certifications | null> {
    const result = await this.service.certifications({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Certifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCertifications(
    @common.Param() params: CertificationsWhereUniqueInput,
    @common.Body() data: CertificationsUpdateInput
  ): Promise<Certifications | null> {
    try {
      return await this.service.updateCertifications({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Certifications })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCertifications(
    @common.Param() params: CertificationsWhereUniqueInput
  ): Promise<Certifications | null> {
    try {
      return await this.service.deleteCertifications({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
