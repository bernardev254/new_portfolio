/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Certifications as PrismaCertifications } from "@prisma/client";

export class CertificationsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CertificationsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.certifications.count(args);
  }

  async certificationsItems<T extends Prisma.CertificationsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CertificationsFindManyArgs>
  ): Promise<PrismaCertifications[]> {
    return this.prisma.certifications.findMany<Prisma.CertificationsFindManyArgs>(
      args
    );
  }
  async certifications<T extends Prisma.CertificationsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CertificationsFindUniqueArgs>
  ): Promise<PrismaCertifications | null> {
    return this.prisma.certifications.findUnique(args);
  }
  async createCertifications<T extends Prisma.CertificationsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CertificationsCreateArgs>
  ): Promise<PrismaCertifications> {
    return this.prisma.certifications.create<T>(args);
  }
  async updateCertifications<T extends Prisma.CertificationsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CertificationsUpdateArgs>
  ): Promise<PrismaCertifications> {
    return this.prisma.certifications.update<T>(args);
  }
  async deleteCertifications<T extends Prisma.CertificationsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CertificationsDeleteArgs>
  ): Promise<PrismaCertifications> {
    return this.prisma.certifications.delete(args);
  }
}
