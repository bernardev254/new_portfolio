/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Certifications } from "./Certifications";
import { CertificationsCountArgs } from "./CertificationsCountArgs";
import { CertificationsFindManyArgs } from "./CertificationsFindManyArgs";
import { CertificationsFindUniqueArgs } from "./CertificationsFindUniqueArgs";
import { DeleteCertificationsArgs } from "./DeleteCertificationsArgs";
import { CertificationsService } from "../certifications.service";
@graphql.Resolver(() => Certifications)
export class CertificationsResolverBase {
  constructor(protected readonly service: CertificationsService) {}

  async _certificationsItemsMeta(
    @graphql.Args() args: CertificationsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Certifications])
  async certificationsItems(
    @graphql.Args() args: CertificationsFindManyArgs
  ): Promise<Certifications[]> {
    return this.service.certificationsItems(args);
  }

  @graphql.Query(() => Certifications, { nullable: true })
  async certifications(
    @graphql.Args() args: CertificationsFindUniqueArgs
  ): Promise<Certifications | null> {
    const result = await this.service.certifications(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Certifications)
  async deleteCertifications(
    @graphql.Args() args: DeleteCertificationsArgs
  ): Promise<Certifications | null> {
    try {
      return await this.service.deleteCertifications(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
