/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AboutMeService } from "../aboutMe.service";
import { AboutMeCreateInput } from "./AboutMeCreateInput";
import { AboutMe } from "./AboutMe";
import { AboutMeFindManyArgs } from "./AboutMeFindManyArgs";
import { AboutMeWhereUniqueInput } from "./AboutMeWhereUniqueInput";
import { AboutMeUpdateInput } from "./AboutMeUpdateInput";

export class AboutMeControllerBase {
  constructor(protected readonly service: AboutMeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AboutMe })
  async createAboutMe(
    @common.Body() data: AboutMeCreateInput
  ): Promise<AboutMe> {
    return await this.service.createAboutMe({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AboutMe] })
  @ApiNestedQuery(AboutMeFindManyArgs)
  async aboutMes(@common.Req() request: Request): Promise<AboutMe[]> {
    const args = plainToClass(AboutMeFindManyArgs, request.query);
    return this.service.aboutMes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AboutMe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aboutMe(
    @common.Param() params: AboutMeWhereUniqueInput
  ): Promise<AboutMe | null> {
    const result = await this.service.aboutMe({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AboutMe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAboutMe(
    @common.Param() params: AboutMeWhereUniqueInput,
    @common.Body() data: AboutMeUpdateInput
  ): Promise<AboutMe | null> {
    try {
      return await this.service.updateAboutMe({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AboutMe })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAboutMe(
    @common.Param() params: AboutMeWhereUniqueInput
  ): Promise<AboutMe | null> {
    try {
      return await this.service.deleteAboutMe({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
