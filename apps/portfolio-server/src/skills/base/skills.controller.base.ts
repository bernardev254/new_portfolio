/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SkillsService } from "../skills.service";
import { SkillsCreateInput } from "./SkillsCreateInput";
import { Skills } from "./Skills";
import { SkillsFindManyArgs } from "./SkillsFindManyArgs";
import { SkillsWhereUniqueInput } from "./SkillsWhereUniqueInput";
import { SkillsUpdateInput } from "./SkillsUpdateInput";

export class SkillsControllerBase {
  constructor(protected readonly service: SkillsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Skills })
  async createSkills(@common.Body() data: SkillsCreateInput): Promise<Skills> {
    return await this.service.createSkills({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Skills] })
  @ApiNestedQuery(SkillsFindManyArgs)
  async skillsItems(@common.Req() request: Request): Promise<Skills[]> {
    const args = plainToClass(SkillsFindManyArgs, request.query);
    return this.service.skillsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Skills })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async skills(
    @common.Param() params: SkillsWhereUniqueInput
  ): Promise<Skills | null> {
    const result = await this.service.skills({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Skills })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSkills(
    @common.Param() params: SkillsWhereUniqueInput,
    @common.Body() data: SkillsUpdateInput
  ): Promise<Skills | null> {
    try {
      return await this.service.updateSkills({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Skills })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSkills(
    @common.Param() params: SkillsWhereUniqueInput
  ): Promise<Skills | null> {
    try {
      return await this.service.deleteSkills({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
