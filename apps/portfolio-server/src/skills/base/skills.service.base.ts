/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Skills as PrismaSkills } from "@prisma/client";

export class SkillsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SkillsCountArgs, "select">): Promise<number> {
    return this.prisma.skills.count(args);
  }

  async skillsItems<T extends Prisma.SkillsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SkillsFindManyArgs>
  ): Promise<PrismaSkills[]> {
    return this.prisma.skills.findMany<Prisma.SkillsFindManyArgs>(args);
  }
  async skills<T extends Prisma.SkillsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SkillsFindUniqueArgs>
  ): Promise<PrismaSkills | null> {
    return this.prisma.skills.findUnique(args);
  }
  async createSkills<T extends Prisma.SkillsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SkillsCreateArgs>
  ): Promise<PrismaSkills> {
    return this.prisma.skills.create<T>(args);
  }
  async updateSkills<T extends Prisma.SkillsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SkillsUpdateArgs>
  ): Promise<PrismaSkills> {
    return this.prisma.skills.update<T>(args);
  }
  async deleteSkills<T extends Prisma.SkillsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SkillsDeleteArgs>
  ): Promise<PrismaSkills> {
    return this.prisma.skills.delete(args);
  }
}
